# -*- coding: utf-8 -*-
"""stage.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xa1qkgnyzwQ8oP5nTgbn4c46pMfKEjiP
"""

from clients.common_client import CommonClient
from clients.atlas_client import AtlasClient

class StageRunner:
    def __init__(self):
        self.common = CommonClient()
        self.atlas = AtlasClient()

    def run_stage(self, stage, state):
        print(f"\n>>> Running Stage: {stage['name']} (mode={stage['mode']})")

        if stage["mode"] == "deterministic":
            for ability in stage["abilities"]:
                self._execute_ability(ability, state)

        elif stage["mode"] == "non-deterministic":
            # Example: DECIDE stage
            for ability in stage["abilities"]:
                if ability["name"] == "solution_evaluation":
                    state = self._execute_ability(ability, state)
                    score = 85  # mock score
                    if score < 90:
                        print("Score < 90 → Escalating...")
                        self._execute_ability(
                            {"name": "escalation_decision", "mcp_client": "ATLAS"}, state
                        )
                    else:
                        print("Score >= 90 → Proceeding without escalation.")
                    # Always update payload
                    self._execute_ability(
                        {"name": "update_payload", "mcp_client": "COMMON"}, state
                    )
        return state

    def _execute_ability(self, ability, state):
        if ability["mcp_client"] == "COMMON":
            return self.common.execute(ability["name"], state)
        else:
            return self.atlas.execute(ability["name"], state)

